# -*- coding: utf-8 -*-
"""sigmoid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IN1bI1uzIr_wuaMnqynSrWQIkTcYV1tn
"""

import numpy as np

class ART:
    def __init__(self, num_input, rho=0.5, beta=1):
        self.num_input = num_input
        self.rho = rho  # Vigilance parameter
        self.beta = beta  # Choice parameter
        self.W = np.zeros((num_input, num_input))  # Weight matrix
        self.reset()

    def reset(self):
        self.y = np.zeros(self.num_input)  # Reset internal state

    def predict(self, x):
        # Compute input signal
        net_input = np.dot(self.W, x)

        # Compute activation
        y = net_input / (self.beta + np.linalg.norm(net_input))

        return y

    def train(self, x):
        # Compute input signal
        net_input = np.dot(self.W, x)

        # Compute activation
        y = net_input / (self.beta + np.linalg.norm(net_input))

        # ART choice
        if np.all(y <= self.rho):
            self.W = np.outer(x, x)  # Create a new cluster
        else:
            while True:
                # Calculate match
                match = np.dot(self.W, x) / np.dot(self.W.sum(axis=1), x)

                # Find the neuron with the highest match
                winner_neuron = np.argmax(match)

                # Check if match is greater than vigilance parameter
                if match[winner_neuron] >= self.rho:
                    break
                else:
                    # Mask the winner neuron
                    net_input[winner_neuron] = -np.inf

            # Update weights
            self.W[winner_neuron] = np.maximum(self.W[winner_neuron], x)

        return y

# Example usage
if __name__ == "__main__":
    # Initialize ART network
    art = ART(num_input=3, rho=0.5, beta=1)

    # Training patterns
    patterns = [
        [0, 1, 1],
        [1, 0, 0],
        [1, 1, 1],
        [0, 0, 1]
    ]

    # Training the network
    for pattern in patterns:
        print("Training with pattern:", pattern)
        art.train(pattern)

    # Test pattern
    test_pattern = [1, 0, 1]
    print("\nTesting with pattern:", test_pattern)
    output = art.predict(test_pattern)
    print("Output:", output)

