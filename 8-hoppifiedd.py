# -*- coding: utf-8 -*-
"""sigmoid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IN1bI1uzIr_wuaMnqynSrWQIkTcYV1tn
"""

import numpy as np

class HopfieldNetwork:
    def __init__(self, n_neurons):
        self.n_neurons = n_neurons
        self.weights = np.zeros((n_neurons, n_neurons))

    def predict(self, pattern):
        energy = -0.5 * ((pattern @ self.weights) @ pattern)
        return np.sign((pattern @ self.weights) + energy)

    def train(self, patterns):
        for pattern in patterns:
            self.weights += np.outer(pattern, pattern)

patterns = np.array([
    [1, 1, -1, -1],
    [-1, -1, 1, 1],
    [1, -1, 1, -1],
    [-1, 1, -1, 1]
])

n_neurons = 4

network = HopfieldNetwork(n_neurons)

network.train(patterns)

for pattern in patterns:
  prediction=network.predict(pattern)
  print('Input pattern:',pattern)
  print('Output pattern:',prediction)

