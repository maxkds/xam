# -*- coding: utf-8 -*-
"""sigmoid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IN1bI1uzIr_wuaMnqynSrWQIkTcYV1tn
"""

import numpy as np

class NeuralNetwork:
    def __init__(self,inputt,hidden,output):
        self.W1=np.random.randn(inputt,hidden)
        self.b1=np.zeros(hidden)
        self.W2=np.random.randn(hidden,output)
        self.b2=np.zeros(output)

    def sigmoid(self,x):
        return 1/(1+np.exp(-x))

    def sigmoid_derative(self,x):
        return x*(1-x)

    def forward(self,x):
        self.z1=X @ self.W1+self.b1
        self.a1=self.sigmoid(self.z1)
        self.z2=self.a1 @ self.W2+self.b2
        self.a2=self.sigmoid(self.z2)
        return self.a2

    def backward(self,X,y,output):
        self.output_error=y-output
        self.output_delta=self.output_error * self.sigmoid_derative(output)
        self.hidden_error=self.output_delta @ self.W2.T
        self.hidden_delta=self.hidden_error * self.sigmoid_derative(self.a1)
        self.W1+=X.T @ self.hidden_delta
        self.b1+=np.sum(self.hidden_delta,axis=0)
        self.W2=self.a1.T @ self.output_delta
        self.b2+=np.sum(self.output_delta,axis=0)

    def train(self,X,y,epoch):
        for i in range(epoch):
            output=self.forward(x)
            self.backward(X,y,output)
    def predict(self,X):
        return self.forward(x)

X=np.array([
    [0,0],
    [0,1],
    [1,0],
    [1,1]
])
y=np.array([
    [0],
    [1],
    [1],
    [0]
])

nn=NeuralNetwork(2,4,1)
nn.train(X,y,epoch=10000)
p=nn.predict(X)
print(p)

